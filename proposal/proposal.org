#+STARTUP: indent
#+LATEX_HEADER: \usepackage[numberedbib]{apacite}
#+LATEX_HEADER: \usepackage{graphicx} 
#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+LATEX_HEADER: \usepackage{float}
#+LATEX: \setlength\parindent{0pt}
#+LATEX_CLASS_OPTIONS: [12pt]
#+OPTIONS: toc:nil title:nil 

\begin{titlepage}
	\centering
	\vspace{1.5cm}
	{\huge\bfseries The Axolotl Programming Language Specification\par}
	\vspace{2cm}
	{\Large\itshape \begin{tabular}{ l c }
			Eduardo Salvador Hidalgo Vargas\\
			Andrés Ricardo Garza Vela\\
			\end{tabular} \par}
	\vfill
\end{titlepage}	

\tableofcontents
\clearpage

# Cortázar quote on second page
\vspace*{\fill} 
\begin{quote} 
\Large
\centering 	
Hubo un tiempo en que yo pensaba mucho en los axolotl. Iba a verlos al acuario del Jardín des Plantes y me
quedaba horas mirándolos, observando su inmovilidad, sus oscuros movimientos. Ahora soy un axolotl.

- \emph{Julio Cortázar}
\end{quote}
\vspace*{\fill}
\clearpage



* Vision/Purpose
Axo is our vision of Haskell principles as a Lisp dialect. While Haskell has a "clean syntax", it is full of 
syntactic sugar that makes it hard to reason or learn about. This makes source-code transformations inaccessible
to most programmers. Haskell is already good at meta-programming via type classes, template Haskell and so on but
it lacks some of the power that macros can offer. Therefore, we propose a new programming language that addresses
this shortcoming while preserving Haskell semantics by instead using Lisp syntax (with some extra syntax features
that we consider to be convenient for programming in idiomatic Haskell).

** Main objective
To implement a Haskell-like Lisp: a strongly typed, purely functional programming language.

* Language requirements
**  Basic Elements
Axolotl *is case sensitive*.

#+ATTR_LATEX: :environment tabular :align | p{0.22\textwidth} | p{0.44\textwidth} | p{0.22\textwidth} |
#+CAPTION: Tokens
|----------------+--------------------------------------------------------------------+-----------------------------|
| *Name*         | *Description*                                                      | *Examples*                  |
|----------------+--------------------------------------------------------------------+-----------------------------|
| Integer        | one or more digits [0-9]+                                          | `1`, `234`, `3556`          |
|----------------+--------------------------------------------------------------------+-----------------------------|
| Float          | one or more digits, a decimal point followed by one or more digits | `1.23`, `0.5`, `2234`       |
|----------------+--------------------------------------------------------------------+-----------------------------|
| String literal | any char or escaped char between double quotes                     | `"a string"`                |
|----------------+--------------------------------------------------------------------+-----------------------------|
| Char literal   | only one char or escaped char between single quotes                | 'a' `,` ='\t'=              |
|----------------+--------------------------------------------------------------------+-----------------------------|
| varId          | any sequence of non reserved chars, starting with a lowercase char | `a`, `solve`, `x0`, =`>>=`= |
|----------------+--------------------------------------------------------------------+-----------------------------|
| typeId         | any sequence of non reserved chars, starting with a uppercase char | `List`, `Maybe`, `Int`      |
|----------------+--------------------------------------------------------------------+-----------------------------|

** Syntax Diagrams

*** Grammar:
#+ATTR_LATEX: :environment tabular :align  p{0.25\textwidth}  p{0.70\textwidth} 
| Program           | ::= SExp+                                           |
| SExp              | ::= '(' ExpSeq ')'                                  |
| ExpSeq            | ::= Exp ("space" Exp)+                              |
| Exp               | ::= (SExp \vert Atom \vert IExp \vert InfixExp)     |
| Atom              | ::= (Identifier \vert Literal)                      |
| Literal           | ::= (Int \vert Float \vert String \vert Char)       |
| IExp              | ::= ExpSeq "newline" ("<indent>" ExpSeq "newline")+ |
| InfixExp          | ::= '{' Exp "space" Exp "space" Exp '}'             |
| CommentSingleLine | ::= '-' '-'                                         |
| CommentMultiLine  | ::= "--(" ".*" "--)"                                |

*** Lexems: 
#+ATTR_LATEX: :environment tabular :align  p{0.25\textwidth}  p{0.70\textwidth} 
| digit          | ::= [0-9]w                                                           |
| letter         | ::= [a-zA-Z]                                                         |
| decimal        | ::= [0-9]+                                                           |
| Int            | ::= decimal                                                          |
| Float          | ::= decimal "." decimal                                              |
| UniChar        | ::= "Any Unicode character"                                          |
| LowerUni       | ::= "Any lowercase Unicode character"                                |
| UpperUni       | ::= "Any uppercase Unicode character"                                |
| Char           | ::= "'" UniChar "'"                                                  |
| String         | ::= '"' UniChar+ '"'                                                 |
| Identifier     | ::= ( VarId \vert TypeId )                                           |
| VarId          | ::= LowerUni (UniChar - ReservedChars)*                              |
| TypeId         | ::= UpperUni (UniChar - ReservedChars)*                              |
| ReservedChars  | ::= ('(' \vert ')' \vert '{' \vert '}') \vert ' ' \vert 'whitespace' |
| ValidSymbol    | ::=  UniChar - ReservedChars                                         |
| NotDoubleQuote | ::= UniChar - ' "" '                                                 |


*** Semantic Characteristics
Our language is divided into two fields: values and types. Values are data whereas types are sets of 
values.

- *Values and expressions*
  - The language has semantics close to Haskell. 
  - It has a strong static type system, therefore every expression has a type.
  - All variables are immutable.
  - Functions are automatically curried, therefore it's easy to partially apply. The disadvantage is
    that functions cannot have variable arity.

/Values/ include /primitives/ and /user defined/. Examples of /primitives/ are numbers,
characters or a given function (e.g. =+=). Examples of /user defined values/ may include a tree. 
These are all first class.\\

Expressions are a combination of values by the means of function application. For example =(+ 2 3)=
or the function =(\ x -> (* x x))=. There is a very special value: =undefined=. When =undefined= is
evaluated, the program crashes. =Undefined= allows us to define [[https://en.wikipedia.org/wiki/Partial_function][partial functions]]. Similarly there 
is a very special function: =error=. This function receives a String s and returns =undefined=, which 
will crash the program with the error message s.\\

It is important to note that Axo does not differentiate between functions and operators, because the 
simplicity of the syntax allows an identifier to be composed of only symbols.\\
\clearpage

**** *Looping*

To write something that can be executed multiple times, one should write recursive function:

#+BEGIN_SRC
define (loop x)
  if {x == 0}
     0
     (loop {x - 1})

define (fibonnaci n)
  cond ({n == 0} 0)
       ({n == 1} 0)
       (else (fibonnaci {n - 1}))
#+END_SRC

**** *On Folds*

From a functional programming perspective, folds are called /catamorphisms/. This is important because
they are equivalent to a =for-each= loop in other languages. Therefore, if we can add folds to our 
language, we can express these loops.

- *Right associative fold:*

#+BEGIN_SRC
define (foldr f end xs)
    if (null? xs) 
       end
       (f (head xs) (foldr f end (tail xs)))
#+END_SRC

- *Left associative fold:*

#+BEGIN_SRC
define (foldl f a xs)
    if (null? xs) 
       a
       (foldl f (f a (head xs)) (tail xs))
#+END_SRC

*** Special Functions and Forms
**** *Input/Output*
***** *IO primitives*
#+ATTR_LATEX: :environment tabular :align  | p{0.15\textwidth} | p{0.50\textwidth} |
|---------------+-------------------------------------------|
| *Name*        | *Description*                             |
|---------------+-------------------------------------------|
| =putChar=     | writes a char                             |
|---------------+-------------------------------------------|
| =putStr=      | writes a string                           |
|---------------+-------------------------------------------|
| =putStrLn=    | writes a string with a newline at the end |
|---------------+-------------------------------------------|
| =getChar=     | reads one char                            |
|---------------+-------------------------------------------|
| =getLine=     | reads a complete line                     |
|---------------+-------------------------------------------|
| =getContents= | reads all the content                     |
|---------------+-------------------------------------------|
\clearpage

***** *IO higher level*
#+ATTR_LATEX: :environment tabular :align  | p{0.15\textwidth} | p{0.50\textwidth} |
|-------------+-----------------------------------------------------------------------------|
| *Name*      | *Description*                                                               |
|-------------+-----------------------------------------------------------------------------|
| =write=     | writes data in a way that can be read by the machine                        |
|-------------+-----------------------------------------------------------------------------|
| =read=      | reads input and returns the data parsed                                     |
|-------------+-----------------------------------------------------------------------------|
| =display=   | prints data in a way that can be read by a  human                           |
|-------------+-----------------------------------------------------------------------------|
| =displayLn= | prints data and a newline at the end, in a way that can be read by a  human |
|-------------+-----------------------------------------------------------------------------|

**** *Math Functions*

***** *Integers*
#+ATTR_LATEX: :environment tabular :align  | p{0.15\textwidth} | p{0.50\textwidth} |
|--------+----------------------|
| *Name* | *Description*        |
|--------+----------------------|
| =+=    | integer sum          |
|--------+----------------------|
| =-=    | integer substraction |
|--------+----------------------|
| =*=    | integer product      |
|--------+----------------------|
| =/=    | integer division     |
|--------+----------------------|
| =mod=  | modulo               |
|--------+----------------------|

***** *Floats*
#+ATTR_LATEX: :environment tabular :align  | p{0.15\textwidth} | p{0.50\textwidth} |
|--------+----------------------|
| *Name* | *Description*        |
|--------+----------------------|
| =+.=   | float sum            |
|--------+----------------------|
| =-.=   | float substraction   |
|--------+----------------------|
| =*.=   | float product        |
|--------+----------------------|
| =/.=   | float division       |
|--------+----------------------|
| =sqrt= | square root function |
|--------+----------------------|
| =log=  | logarithm of x       |
|--------+----------------------|
| =exp=  | exponential of x     |
|--------+----------------------|

\clearpage
**** *Special Forms*
#+ATTR_LATEX: :environment tabular :align  | p{0.08\textwidth} | p{0.30\textwidth} | p{0.50\textwidth} |
|----------+--------------------------------------------------------------------------------+---------------------------------------------------|
| *Name*   | *Description*                                                                  | *Grammar*                                         |
|----------+--------------------------------------------------------------------------------+---------------------------------------------------|
| =if=     | evals predicate, and evals only one of the expressions depending on the result | =(if <predicate> <if-true> <if-false>)=           |
|----------+--------------------------------------------------------------------------------+---------------------------------------------------|
| =cond=   | evaluates the clauses one by one, in the first clause that succeeds,           | =(cond (<clause_1> ... <clause_n>) <body>)=       |
|          | the corresponding expression is evaluated and returned.                        | where clause_x = =(<predicate_x> <expression_x>)= |
|----------+--------------------------------------------------------------------------------+---------------------------------------------------|
| =data=   | a data type definition                                                         | =(data <typeName> <type expression>)=             |
|----------+--------------------------------------------------------------------------------+---------------------------------------------------|
| =type=   | type alias                                                                     | =(type <typeName> <type expression>)=             |
|----------+--------------------------------------------------------------------------------+---------------------------------------------------|
| =and=    | short-circuit =and= (also known as conditional and)                            | =(and <expression_1> <expression_2>)=             |
|----------+--------------------------------------------------------------------------------+---------------------------------------------------|
| =or=     | short-circuit =or= (also known as conditional or)                              | =(or <expression_1> <expression_2>)=              |
|----------+--------------------------------------------------------------------------------+---------------------------------------------------|
| =lambda= | a lambda abstraction (can also be written with the unicode \lambda             | =(lambda (<arguments>) <body>)=                   |
|----------+--------------------------------------------------------------------------------+---------------------------------------------------|
| =let=    | local bindings                                                                 | =(let <var name> <expression>)=                   |
|----------+--------------------------------------------------------------------------------+---------------------------------------------------|
| =define= | top level definition of a function or variable                                 | =(define <var name> <expression>)=                |
|          |                                                                                | or                                                |
|          |                                                                                | =(define (<function name> <args>) <expression>)=  |
|----------+--------------------------------------------------------------------------------+---------------------------------------------------|

***** *Extensions*
#+ATTR_LATEX: :environment tabular :align  | p{0.15\textwidth} |
|------------|
| `defmacro` |
|------------|
| `class`    |
|------------|
| `instance` |
|------------|

*** Data Types
**** *Type System*

Types include /type values/ and /type variables/. /Type values/ are *monomorphic* while 
/type variables/ are *polymorphic*. Neither of these are first class. A /type value/, 
or just called *type*, can be understood as a set of possible values. /Type variables/ can be 
understood as a set of any type. We can view type variables as generics in other languages. 
/Type values/ include =Int= or =Int -> Int=. Polymorphic types include the function =head= which 
is of type =List a -> a=. Therefore this function is defined =forAll a= types.\\

The primitive types are: =Integer=, =Float=, =Character=.
\clearpage

**** *On Types*

A sum type is the union of different constructors for the same type, for example:

#+BEGIN_SRC
(data Bool {True | False})
#+END_SRC

On the contrary, product types can be understood as a tuple of any two types (their cartesian product),
the types can be different, for example:

#+BEGIN_SRC
(data Point (Pt Int Int))
#+END_SRC

Product Types are like giving some "type arguments" to a data constructor, while sum types are 
different constructors. An example of combining both of these types:

#+BEGIN_SRC
(data (Node a))
(data Tree {(Node (Tree a) (Tree a)) | (Leaf a)})
#+END_SRC

In this case, the =Tree= can be either a =Tree= with two branches, or an empty =Tree=. This case is
also a good example of a /Recursive Type/.\\

This can also be written in infix notation:

#+BEGIN_SRC
(data Tree {{(Tree a) Node (Tree a)} | (Leaf a)})
#+END_SRC
  

** Language and OS used for development
Axo is written in Haskell, and developed on MacOS and Debian linux.

** Bibliography

- https://www.haskell.org
- https://www.haskell.org/tutorial/goodies.html
- https://docs.racket-lang.org/hackett/index.html
- http://tunes.org/overview.html
- https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours/Towards_a_Standard_Library
- http://dev.stephendiehl.com/fun/006_hindley_milner.html#types

\clearpage

** Features we would like to have  

*** Type Classes
A possible extension to the type system are type classes, which are a constraint over a polymorphic 
type that forces a type to be an instance of that class. This means that it implements a specific
associated function.  We can think of classes as interfaces in other languages. 
Examples include: =Num=, =Show=, =Read=, =Ord= and =Eq=.

*** Meta-programming
- Eval time
- Compilation time
- *Development time*

We think that compilers, programming languages and tools are not
always designed with "ergonomics" in mind.  There is a special focus on
formality, yet, for example, error reporting tends to be ad-hoc.  The users of
programming languages (the programmers) are given text-focused tools
only to develop, mantain and refactor code.  There is no intrinsic
reason this should be the case.  Our main objective is, to provide
meta-programming tools to the programmer.\\

Why is meta-programming feared? Our hypothesis is that its unpredicability makes it unfit for
a program while it's running, and to a lesser extent, during compilation (just ask a programmer
if they use macros in their own programs). There are, however, exceptions to this phenomenon:
hygienic macros in Lisp dialects, or the Ruby object system.
