
--- demo function from "The implementation of Functional Programming Languages" page 82, translated to axo

-- this is a function compilation with the pattern matching compiler involved, and that also uses all it's rules of the pattern matching algorithm.

(define demo
    (f [] ys             -> (a f ys))
    (f {x : xs} []       -> (b f xs))
    (f {x : xs} {y : ys} -> (c f x xs y ys)))

-- is parsed as:

-- Def "demo" [Equation {_equationPat = [PVar "f",PVar "[]",PVar "ys"], _equationBody = App (Var "a") [Var "f",Var "ys"]},Equation {_equationPat = [PVar "f",PCon ":" [PVar "x",PVar "xs"],PVar "[]"], _equationBody = App (Var "b") [Var "f",Var "xs"]},Equation {_equationPat = [PVar "f",PCon ":" [PVar "x",PVar "xs"],PCon ":" [PVar "y",PVar "ys"]], _equationBody = App (Var "c") [Var "f",Var "x",Var "xs",Var "y",Var "ys"]}] Nothing


-- Def "demo" [ Equation
-- 		{ _equationPat = [ PVar "f"
--		  	       	 , PVar "[]"
--				 , PVar "ys"]
-- 		, _equationBody = App (Var "a") [Var "f",Var "ys"]
-- 		}
-- 	   , Equation
-- 		{ _equationPat = [ PVar "f"
--		  	       	 , PCon ":" [PVar "x",PVar "xs"]
-- 				 , PVar "[]"]
-- 		, _equationBody = App (Var "b") [Var "f",Var "xs"]
-- 		}
-- 	   , Equation
-- 	        { _equationPat = [ PVar "f"
--		  	       	 , PCon ":" [PVar "x",PVar "xs"]
--				 , PCon ":" [PVar "y",PVar "ys"]
--				 ]
-- 		, _equationBody = App (Var "c") [Var "f",Var "x",Var "xs",Var "y",Var "ys"]
-- 		}
-- 	   ] Nothing


-- it needs an environment for the match function to run:
-- Map.fromList [(":", TArr [TInt, TADT "List", TADT "List"]), ("[]", (TADT "List"))]

(define id x -> x)

(demo id [] [])

-- output after pattern matching
--
-- Case (Var "_u2")
--      [ Clause ":"
--               ["_u4","_u5"]
--               (Case (Var "_u3")
--                     [ Clause ":"
--                              ["_u6","_u7"]
--                              (App (Var "c") [Var "_u1",Var "_u4",Var "_u5",Var "_u6",Var "_u7"])
--                     , Clause "[]"
--                              []
--                              (App (Var "b") [Var "_u1",Var "_u5"])
--                     ])
--      , Clause "[]"
--               []
--               (App (Var "a") [Var "_u1",Var "_u3"])
--      ]
