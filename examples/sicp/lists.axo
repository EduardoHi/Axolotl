
--- List functions

(data List a (Cons a List) (Nil))

(define foldr :: ((a -> b -> b) -> b -> List a -> b)
    f end Nil		-> end
    f end (Cons x xs)	-> (f x (foldr f end xs)))

(define foldl :: ((b -> a -> b) -> b -> List a -> b)
    f a Nil		-> end
    f a (Cons x xs)	-> (foldl f (f a x)) xs)


-- syntactic sugar for lists:
-- [] = Nil
-- ([ a b c d ]) = (Cons a (Cons b.. Nil))

-- syntatic sugar for pairs:
-- {a , b} = (Tuple a b)
